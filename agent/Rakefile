require "rake/clean"
require "fileutils"
require "tmpdir"

module Env
  def self.method_missing(method_name)
    ENV.fetch(method_name.to_s) # fetch throws an error if the key is undefined. This is the behavior we want.
  end
end

task :temp_dir do
  dir = "/tmp/yolo"
  artifacts_path = File.join(dir, ENV["FASTLANE_CI_ARTIFACTS"])
  FileUtils.mkdir_p(artifacts_path)
  puts "Using artifacts path '#{artifacts_path}'"
  Dir.chdir(dir)
end
CLEAN.add(File.join(Dir.tmpdir, "fastlane-ci*"))

task git_clone: :temp_dir do
  sh "git clone --depth 1 #{Env.GIT_URL} repo"
  Dir.chdir("repo")
end

task :bundler do
  sh "gem install bundler --no-doc"
  sh "bundle install --deployment"
end

task :cocoapods do
  sh "gem install cocoapods --no-doc"
  sh "pod install"
end

desc("run a fastlane action")
task :fastlane, [:action] => [:git_clone, :bundler] do |t, args|
  log_path = File.join(ENV["FASTLANE_CI_ARTIFACTS"], "fastlane.log")
  sh "bundle exec fastlane #{args.action} | tee '#{log_path}'"
end